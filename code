import re
import long_respond as long


def message_probability(split_message, recognised_words, single_response=False, required_words=[]):
    message_certainty = 0
    has_required_words = True

    if not recognised_words:
        return 0

    for word in split_message:
        if word in recognised_words:
            message_certainty += 1
        if required_words and word.lower() in required_words:
            has_required_words = True

    percentage = message_certainty / len(recognised_words)

    if has_required_words or single_response:
        return int(percentage * 100)
    else:
        return 0

def check_all_messages(split_message):
    highest_probability_list={}

    def response(bot_response,list_of_words,single_response=False,required_words=[]):
        nonlocal highest_probability_list
        highest_probability_list[bot_response] = message_probability(split_message, list_of_words, single_response, required_words)

    response(long.A_pershendetje,["pershendetje","qkemi"],single_response = True)
    response(long.A_prezantimi,["qysh","quheni","emrin"],required_words =["emri","emrin"])
    response(long.A_mirmengjes, ['mirmengjes' ], required_words=['mirmengjes'])
    response(long.A_mirdita, ['mirdita'], required_words=['mirdita'])
    response(long.A_mirmrama, ['miremrama',"mirembrema",'mirmrama'], required_words=['miremrama','mirmrama','mirembrema'])
    response(long.A_diqkaInteresant,['interesant','diqka','trego'] , required_words=['trego', 'interesant'])
    response(long.A_aftesit, ['aftesit',"qka",'mund','te','beni','afte' ], required_words=['aftesit','beni','i afte'])
    response(long.A_filem, ['filem','ju','pelqen','filmi','film','filma'],required_words=["filem",'film','filmi','filma'])
    response(long.A_serial, ['serial', 'ju', 'pelqen', 'seriale','seriali'],required_words=["serial", 'seriale','seriali'])
    response(long.A_koha,['koha','ora'],required_words=['ora','koha'])
    response(long.A_data,['data'],required_words=['data'])
    response(long.A_SiJeni,["si ","jeni","je","kalon",'kaloni'],required_words = ["si"," jeni"])
    response(long.A_Libra, ['libri','libra','qfar'], required_words=['libri','libra','librat'])
    response(long.A_Muzik, ['Muzik','Këng','Muzika','Qfar'], required_words=['Muzik','Muzika','Këng'])



    best_match = max(highest_probability_list,key= highest_probability_list.get)

    return long.unknown() if highest_probability_list[best_match] < 1 else best_match


def get_response(user_input):
    split_message = re.split(r"\s+|[,.;?!-]\s*", user_input.lower())
    response = check_all_messages(split_message)
    return response


print("   ______________________")
print(" /                       \\")
print("|   Welcome to ChatBot!   |")
print("|    How can I help?      |")
print(" \\______________________ /")
while True:

    print("Bot: " + get_response(input("\n\nYou:")))
